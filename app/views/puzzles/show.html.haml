- @current_class = 'question hentry entry post'


- question_body = @puzzle.description #find_and_preserve(shapado_auto_link(markdown(@puzzle.description.present? ? @puzzle.description : @puzzle.title)))

- content_for :head do
  / %meta{:name => "keywords", :content => clean_seo_keywords(@puzzle.tags.dup, @puzzle.title)}
  %meta{:name => "description", :content => question_body.gsub(/<\/?[^>]*>/, "")[0, 255] }
  / %link{:rel => "canonical", :href => question_url(@puzzle) }

- content_for :subtabs do
  %h1.navtitle.title.entry-title
    &= @puzzle.title
    / - if @puzzle.closed
    /   =" [#{t("closed", :scope => "activerecord.attributes.question").upcase}]"

- source = puzzle_path(@puzzle)
= error_messages_for 'answer'

#question-vote-col
  / - if current_user && @puzzle.watch_for?(current_user)
  /   = link_to image_tag("layer-visible-on.png", 'data-src' => "/images/layer-visible-off.png"), unwatch_puzzle_path(@puzzle), :class => 'question-action', "data-undo" =>  watch_puzzle_path(@puzzle), "data-title" => t(".watch_tooltip"), :title => t(".unwatch_tooltip"), :id => "watch-question"
  / - else
  /   = link_to image_tag("layer-visible-off.png", 'data-src' => "/images/layer-visible-on.png"), watch_puzzle_path(@puzzle), :title => t(".watch_tooltip"), :class => 'question-action', "data-undo" =>  unwatch_puzzle_path(@puzzle), "data-title" => t(".unwatch_tooltip"), :id => "watch-question"

  =raw(vote_box(@puzzle, puzzle_path(@puzzle), false))#@puzzle.closed)

  / - if logged_in? && favorite = current_user.favorite(@puzzle)
  /   = link_to image_tag("favorites.png", 'data-src' => "/images/unfavorites.png"), unfavorite_puzzle_path(@puzzle), :id => "unfavorite-link", :title => t(".unfavorite_tooltip"), :class => 'question-action', "data-undo" =>  favorite_puzzle_path(@puzzle), "data-title" => t(".favorite_tooltip"), 'data-counter' => '.favorites_count'
  / - else
  /   = link_to image_tag("unfavorites.png", 'data-src' => "/images/favorites.png"), favorite_puzzle_path(@puzzle), :id => "favorite-link", :title => t(".favorite_tooltip"), :class => 'question-action', "data-undo" =>  unfavorite_puzzle_path(@puzzle), "data-title" => t(".unfavorite_tooltip"), 'data-counter' => '.favorites_count'
  / .favorites_count
  /   &= @puzzle.favorites_count


#question-body-col.commentable.markdown
  %a{:name => @puzzle.id}
  #body
    / - if @puzzle.closed && @puzzle.close_reason
    /   #close_reason
    /     = t(".close_reason")
    /     = t(@puzzle.close_reason.reason, :scope=>"close_requests.form")
    /     - if !@puzzle.close_reason.comment.empty?
    /       .comment
    /         =find_and_preserve(shapado_auto_link(@puzzle.close_reason.comment))
    .post-text.entry-content
      = question_body
  / .tag-list
  /   - @puzzle.tags.each do |tag|
  /     %span.tag
  /       = link_to h(tag), url_for(:controller => "questions", :action => "index", :tags => tag), :rel => "tag"
  /   - if logged_in? && (current_user.can_modify?(@puzzle) || current_user.can_retag_others_questions_on?(current_group))
  /     %span.retag
  /       = link_to t('.retag'), retag_puzzle_path(@puzzle), :id => 'retag'
  .post-info
    .author.user_info.vcard
      .gravatar.logo
        / -if !@puzzle.anonymous
        /   = gravatar(@puzzle.user.email.to_s, :size => 32)
      .user_data
        %span.asked_by
          Posted by
        / -if @puzzle.anonymous
        /   =t("global.anonymous")
        / -else
        =render :partial => "users/user_mini", :locals => {:user => @puzzle.user}
        %span.time_ago.published{:title => @puzzle.created_at, :class => "relativetime"}
          = "#{time_ago_in_words(@puzzle.created_at)} ago"
          / - if @puzzle.wiki
          /   .wiki_flag
          /     wiki
          / %span.adr
          /   - if !@puzzle.user.hide_country
          /     %span.country-name
          /       = t("global.from", :site => @puzzle.user.country_name)
          /       = country_flag(@puzzle.user.country_code, @puzzle.user.country_name)
      .clear
    / - if @puzzle.updated_by.present?
    /   .user_info
    /     .gravatar.logo
    /       = gravatar(@puzzle.updated_by.email.to_s, :size => 32)
    /     .user_data
    /       %span.asked_by
    /         = t('activerecord.attributes.question.updated_by')
    /       =render :partial => "users/user_mini", :locals => {:user => @puzzle.updated_by}
    /       %span.time_ago.published{:title => @puzzle.updated_at, :class => "relativetime"}
    /         = t("time.ago", :time => time_ago_in_words(@puzzle.updated_at))
    /       %span.adr
    /         - if !@puzzle.updated_by.hide_country
    /           %span.country-name
    /             = t("global.from", :site => @puzzle.updated_by.country_name)
    /             = country_flag(@puzzle.updated_by.country_code, @puzzle.updated_by.country_name)
    /     .clear
  .controls
    .actions
      / - if !@flag.new?
      /   .flagged
      /     = "#{t('.flagged_as')} #{t(@flag.reason, :scope=>'flags.form')}"
      /     = link_to t("scaffold.edit"), edit_question_flag_path(@puzzle,@flag), :class => "flag-link", :id => "edit_question_flag_link", :rel => 'nofollow'
      /     = link_to t("scaffold.destroy"), question_flag_path(@puzzle,@flag), :id => "destroy_question_flag_link", :rel => 'nofollow', :confirm => "are you sure?", :method => :delete
      / - elsif logged_in? && current_user != @puzzle.user
      /   = link_to t(".flag"), new_question_flag_path(@puzzle), :class => "flag-link", :id => "question_flag_link", :rel => 'nofollow'

      - if logged_in?
        / - if show_close_request_form
        /   -if !@close_request.new?
        /     .flagged
        /       = "#{t('.requested_close_as')} #{t(@close_request.reason, :scope=>'close_requests.form')}"
        /       = link_to t(".edit_request"), edit_question_close_request_path(@puzzle,@close_request), :class => "flag-link", :id => "edit_question_close_request_link", :rel => 'nofollow'
        /       = link_to t(".retract_request"), question_close_request_path(@puzzle,@close_request), :id => "destroy_question_close_request_link", :rel => 'nofollow', :confirm => "are you sure?", :method => :delete
        /   = link_to t(".request_closing"), @close_request.new? ? new_question_close_request_path(@puzzle) : edit_question_close_request_path(@puzzle, @close_request), :id => "request-close-link", :rel => 'nofollow', :title => t('.request_closing_details')
        / 
        / - if show_open_request_form
        /   -if !@open_request.new?
        /     .flagged
        /       = "#{t('.requested_reopening')} #{@open_request.comment}"
        /       = link_to t(".edit_request"), edit_question_open_request_path(@puzzle, @open_request), :class => "flag-link", :id => "edit_question_open_request_link", :rel => 'nofollow'
        /       = link_to t(".retract_request"), question_open_request_path(@puzzle,@open_request), :id => "destroy_question_open_request_link", :rel => 'nofollow', :confirm => "are you sure?", :method => :delete
        / 
        /   -if current_user.mod_of?(current_group)
        /     = link_to t(".open"), open_puzzle_path(@puzzle), :rel => 'nofollow', :title => t('.request_opening_details'), :method => "put"
        /   -else
        /     = link_to t(".request_opening"), new_question_open_request_path(@puzzle), :id => "request-open-link", :rel => 'nofollow', :title => t('.request_opening_details')
        / 
        / - if (@puzzle.wiki && current_user.can_edit_wiki_post_on?(@puzzle.group)) || current_user.can_edit_others_posts_on?(@puzzle.group) || current_user.can_modify?(@puzzle)
        /   = link_to t('scaffold.edit'), edit_puzzle_path(@puzzle), :class => "button"
        / - if @puzzle.versions.count > 0
        /   = link_to t(".history", :default => "history"), history_puzzle_path(@puzzle)
        / - if (current_user.can_modify?(@puzzle) || current_user.owner_of?(@puzzle.group))
        /   = link_to t("scaffold.destroy"), puzzle_path(@puzzle.id), :confirm => "are you sure?", :method => :delete
        / - if current_user.mod_of?(@puzzle.group)
        /   -if !@puzzle.closed
        /     = link_to t('.close'), question_close_requests_path(@puzzle)
        /   = link_to t(".ban"), ban_path(:question_ids => [@puzzle.id]), :class => "button", :confirm => "are you sure?"
    .forms
      -# render :partial => "flags/form", :locals => {:flag => @flag, :flaggeable => @puzzle, :source => source, :form_id => "question_flag_form" }

      -# if !@puzzle.closed && show_close_request_form
        -#= render :partial => "close_requests/form", :locals => { :question => @puzzle, :close_request => @close_request, :hide => true, :form_id => "request_close_question_form"}

  / - if logged_in?
  /   = link_to t("comments.shared.add_comment"), new_question_comment_path(@puzzle), :id => "add_comment_link", :rel => 'nofollow'
  / 
  / .comments
  /   -@puzzle.comments.each do |comment|
  /     = render :partial => "comments/comment", :object => comment, :locals => {:source => source, :mini => true}
  / .clear
  / .forms
  /   / .comment-form-question
  /   /   -form_tag question_comments_path(@puzzle), :class => "form commentForm nestedAnswerForm", :id => "add_comment_form" do
  /   /     -@comment = Comment.new
  /   /     = render :partial => "comments/form", :locals => {:source => source, :commentable => @puzzle}
  /   /     .group.navform
  /   /       = submit_tag t("comments.shared.comment_submit"), :class => "button"
  /   /       = t("global.or")
  /   /       = link_to t('scaffold.cancel'), '', :class => 'cancel_comment'

%a{:name=>"answers"}
#answers
  .secondary-navigation{:class => @active_subtab.to_s}
    / .navtitle
    /   = t(".answers_title", :count => @answers.total_entries + (@puzzle.accepted ? 1 : 0))
    / 
    / %ul
    /   %li.newest
    /     = link_to t("questions.index.newest"), puzzle_path(@puzzle, :sort=>"newest", :anchor => "answers"), :rel => "nofollow"
    /   %li.votes
    /     = link_to t("questions.index.votes"), puzzle_path(@puzzle, :sort=>"votes", :anchor => "answers"), :rel => "nofollow"
    /   %li.oldest
    /     = link_to t("questions.index.oldest"), puzzle_path(@puzzle, :sort=>"oldest", :anchor => "answers"), :rel => "nofollow"
    .clear
  .block
    / - if @puzzle.accepted
    /   -solution = @puzzle.answer
    /   =render :partial=> "answer", :locals=> {:question => @puzzle, :answer => solution} unless solution.nil?
    .hentry
      -@solutions.each do |answer|
        =render :partial=> "answer", :locals=> {:question => @puzzle, :answer => answer}
    / =will_paginate(@solutions)

/ -unless false #@puzzle.closed
/   %a{:name=>"to_answer"}
/   -form_for @answer, :url => question_answers_path(@puzzle.id), :html => {:class => "form mainAnswerForm"} do |f|
/     = render :partial => "answers/form", :locals => {:f => f, :markdown => true}
/     .group.navform
/       .controls.right{:style => "width: 50%"}
/         .left{:style => "width: 49.5%"}
/           = f.label :wiki, "Wiki", :class => "radio"
/           = f.check_box :wiki, :class => "checkbox"
/         .left{:style => "width: 49.5%"}
/           = f.label :anonymous, t("scaffold.post_as_anonymous"), :class => "radio"
/           = f.check_box :anonymous, {:class => "checkbox"}, true, false
/       = submit_tag t('answers.form.submit'), :class => "button"
/     .clear

-content_for :sidebar do
  .block
    / %h3
    /   = t(".share")
    / .content
    /   / %ul.share
    /   /   / %li
    /   /   /   = render :partial => "identica"
    /   /   / - if current_group.domain != AppConfig.domain
    /   /   /   %li
    /   /   /     = render :partial => "shapado"
    /   /   %li
    /   /     = render :partial => "twitter"
    /   /   / %li
    /   /   /   = render :partial => "linkedin"
    /   /   / %li
    /   /   /   = render :partial => "think"
    /   /   %li
    /   /     = render :partial => "facebook"
    / .clear

  / - if logged_in? && (current_user.mod_of?(current_group) || current_user.can_view_offensive_counts_on?(current_group))
  /   -unless @puzzle.flags.count == 0
  /     .block
  /       %h3
  /         = t(:flags, :scope => "activerecord.models")
  /       .content
  /         = render :partial => "flags/list", :locals => {:flaggeable => @puzzle}
  / 
  /   -unless @puzzle.close_requests.size == 0
  /     .block
  /       %h3
  /         = t(:prural_name, :scope => "close_requests.model")
  /       .content
  /         = render :partial => "close_requests/list", :locals => {:question => @puzzle}
  / 
  /   -unless @puzzle.open_requests.size == 0
  /     .block
  /       %h3
  /         = t(:prural_name, :scope => "open_requests.model")
  /       .content
  /         = render :partial => "open_requests/list", :locals => {:question => @puzzle}
  / 
  / .block
  /   %h3
  /     = t('.tags', :default => [:"layouts.application.tags", :"activerecord.attributes.user.tags", "tags"])
  /   = render :partial => "shared/tag_list", :object => @tag_cloud, :locals => { :extra_params => {:controller => "questions", :action => "index"} }
  /   .clear
  / 
  / - if @puzzle.badges.size > 0
  /   .block
  /     %h3
  /       = t('badges', :scope => "activerecord.models")
  /     .content
  /       %ul.list
  /         -@puzzle.badges.each do |badge|
  /           %li
  /             = render :partial => "badges/badge", :object => badge, :locals => {:hide_user => false}
  / 
  / .block.stats
  /   - if @puzzle.group_id != current_group.id
  /     = t(".asked_on")
  /     &= @puzzle.group.name
  / 
  /   .entry
  /     .text.asked
  /       = t('activerecord.attributes.question.created_at')
  /       .data
  /         = t("time.ago", :time => time_ago_in_words(@puzzle.created_at))
  /   .entry
  /     .text.viewed
  /       = t('.viewed')
  /     .data
  /       = t('number.x_time', :count => number_with_delimiter(@puzzle.views_count))
  /   .entry
  /     .text.last_activity
  /       = t(".last_activity")
  /     .data.updated{:title => @puzzle.activity_at, :class => "relativetime"}
  /       = t("time.ago", :time => time_ago_in_words(@puzzle.activity_at))
  / 
  / -related_questions = Question.related_questions(@puzzle, :language => find_languages)
  / - if !related_questions.empty?
  /   .block
  /     %h3
  /       =t(".related_questions")
  /     .content
  /       %ul.list
  /         -related_questions.each do |rq|
  /           %li
  /             = link_to h(rq.title), puzzle_path(rq), :title => truncate(strip_tags(rq.body), :length => 200)
